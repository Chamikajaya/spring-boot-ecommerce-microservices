spring:

  datasource:
    url: jdbc:postgresql://localhost:5432/order
    username: chamika
    password: password
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: validate # since we are using flyway to manage the schema :)
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true

  flyway:
    baseline-on-migrate: true
    enabled: true
    baseline-description: "init product database"
    baseline-version: 0
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

server:
  port: 8070

application:
  config:

    # ! Below we are not directly using the port numbers of each service, rather we are using our api-gateway server. This way is much better than using the port numbers of each service directly, because when a service scales up or down, the port number will change. But the api-gateway server will always be there to route the requests to the correct service + it has a load balancer built in. ðŸ˜ŠðŸ˜ŠðŸ˜Š

    customer-url: http://localhost:8222/api/v1/customers
    product-url: http://localhost:8222/api/v1/products
    payment-url: http://localhost:8222/api/v1/payments

